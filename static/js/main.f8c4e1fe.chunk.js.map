{"version":3,"sources":["reducer/listReducer.js","context/ListContext.js","components/lightTheme/NavbarLight.js","components/lightTheme/ToDoFormLight.js","components/lightTheme/NavTopLight.js","components/lightTheme/ToDoListDetailsLight.js","components/lightTheme/ToDoListLight.js","components/darkTheme/Navbar.js","components/darkTheme/ToDoForm.js","components/darkTheme/NavTop.js","components/darkTheme/ToDoListDetails.js","components/darkTheme/ToDoList.js","components/Theme.js","App.js","serviceWorker.js","index.js"],"names":["listReducer","state","action","type","text","list","id","uuid","filter","ListContext","createContext","ListContextProvider","props","useReducer","localData","localStorage","getItem","JSON","parse","lists","dispatch","useEffect","setItem","stringify","Provider","value","children","NavbarLight","className","href","target","rel","ToDoFormLight","useContext","useState","setText","onSubmit","e","preventDefault","placeholder","onChange","required","NavTopLight","length","onClick","ToDoListDetailsLight","ToDoListLight","map","key","Navbar","ToDoForm","NavTop","ToDoListDetails","ToDoList","Theme","isOn","handleToggle","onColor","checked","style","background","htmlFor","App","setValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8c4e1fe.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\r\n\r\nexport const listReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_LIST':\r\n            return [...state, {\r\n                text: action.list.text,\r\n                id: uuid()\r\n            }]\r\n        case 'REMOVE_LIST':\r\n            return state.filter(list => list.id !== action.id)\r\n        case 'CLEAR_ALL':\r\n            return []\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { listReducer } from '../reducer/listReducer';\r\n\r\nexport const ListContext = createContext();\r\n\r\nconst ListContextProvider = (props) => {\r\n    const [lists, dispatch] = useReducer(listReducer, [], () => {\r\n        const localData = localStorage.getItem('lists')\r\n        return localData ? JSON.parse(localData) : [];\r\n    });\r\n    useEffect(() => {\r\n        localStorage.setItem('lists', JSON.stringify(lists))\r\n    }, [lists]);\r\n\r\n    return (\r\n        <ListContext.Provider value={{ lists, dispatch }}>\r\n            {props.children}\r\n        </ListContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ListContextProvider;\r\n\r\n\r\n","import React from 'react'\r\nimport './Light.css';\r\n\r\nconst NavbarLight = () => {\r\n    return (\r\n        <div className=\"navbar-light\">\r\n            <h3>React.js To Do List</h3>\r\n            <h6>by <a\r\n                href=\"https://milostrifunovic1.github.io/portfolio/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">\r\n                Miloš Trifunović</a></h6>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavbarLight;\r\n","import React, { useContext, useState } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport './Light.css';\r\n\r\nconst ToDoFormLight = () => {\r\n    const { dispatch } = useContext(ListContext);\r\n    const [text, setText] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'ADD_LIST', list: {\r\n                text\r\n            }\r\n        });\r\n        setText('');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"input-light\"\r\n                type=\"text\"\r\n                placeholder=\"What do you need to do?\"\r\n                onChange={(e) => setText(e.target.value)}\r\n                value={text}\r\n                required>\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ToDoFormLight;\r\n","import React, { useContext } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport ToDoFormLight from './ToDoFormLight';\r\nimport './Light.css';\r\n\r\nconst NavTopLight = () => {\r\n    const { lists } = useContext(ListContext);\r\n    const { dispatch } = useContext(ListContext);\r\n\r\n    return lists.length > 0 ? (\r\n        <div className=\"nav-top-light\">\r\n            {lists.length > 1 ?\r\n                (\r\n                    <p>Currently you have <b>{lists.length}</b> things to do.</p>\r\n                ) : (\r\n                    <p>Currently you have <b>{lists.length}</b> thing to do.</p>\r\n                )\r\n            }\r\n            <ToDoFormLight />\r\n            <button className=\"clear-light\" onClick={() => dispatch({ type: 'CLEAR_ALL' })}>REMOVE ALL</button>\r\n        </div >\r\n\r\n    ) : (\r\n            <div className=\"nav-top-light\">\r\n                <p>Currently you have nothing to do ;-)</p>\r\n                <h3>Cheers!</h3>\r\n                <ToDoFormLight />\r\n                <button className=\"clear-light\" onClick={() => dispatch({ type: 'CLEAR_ALL' })}>REMOVE ALL</button>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default NavTopLight;\r\n","import React, { useContext } from 'react';\r\nimport { ListContext } from '../../context/ListContext';\r\nimport './Light.css';\r\n\r\nconst ToDoListDetailsLight = ({ list }) => {\r\n    const { dispatch } = useContext(ListContext);\r\n\r\n    return (\r\n        <li onClick={() => dispatch({ type: 'REMOVE_LIST', id: list.id })}>\r\n            <div className=\"text-light\"> {list.text} </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDoListDetailsLight;\r\n","import React, { useContext } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport ToDoListDetailsLight from './ToDoListDetailsLight';\r\nimport './Light.css';\r\n\r\nconst ToDoListLight = () => {\r\n    const { lists } = useContext(ListContext);\r\n    return (\r\n        <div className=\"todo-list-light\">\r\n            <ul>\r\n                {lists.map(list => {\r\n                    return (<ToDoListDetailsLight list={list} key={list.id} />);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoListLight;\r\n","import React from 'react'\r\nimport './Dark.css';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <div className=\"navbar\">\r\n            <h3>React.js To Do List</h3>\r\n            <h6>by <a\r\n                href=\"https://milostrifunovic1.github.io/portfolio/\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\">\r\n                Miloš Trifunović</a></h6>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { useContext, useState } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport './Dark.css';\r\n\r\nconst ToDoForm = () => {\r\n    const { dispatch } = useContext(ListContext);\r\n    const [text, setText] = useState('');\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type: 'ADD_LIST', list: {\r\n                text\r\n            }\r\n        });\r\n        setText('');\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"input-dark\"\r\n                type=\"text\"\r\n                placeholder=\"What do you need to do?\"\r\n                onChange={(e) => setText(e.target.value)}\r\n                value={text}\r\n                required>\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm;\r\n","import React, { useContext } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport ToDoForm from './ToDoForm';\r\nimport './Dark.css';\r\n\r\nconst NavTop = () => {\r\n    const { lists } = useContext(ListContext);\r\n    const { dispatch } = useContext(ListContext);\r\n\r\n    return lists.length > 0 ? (\r\n        <div className=\"nav-top\">\r\n            {lists.length > 1 ?\r\n                (\r\n                    <p>Currently you have <b>{lists.length}</b> things to do.</p>\r\n                ) : (\r\n                    <p>Currently you have <b>{lists.length}</b> thing to do.</p>\r\n                )\r\n            }\r\n            <ToDoForm />\r\n            <button className=\"clear\" onClick={() => dispatch({ type: 'CLEAR_ALL' })}>REMOVE ALL</button>\r\n        </div >\r\n\r\n    ) : (\r\n            <div className=\"nav-top\">\r\n                <p>Currently you have nothing to do ;-)</p>\r\n                <h3>Cheers!</h3>\r\n                <ToDoForm />\r\n                <button className=\"clear\" onClick={() => dispatch({ type: 'CLEAR_ALL' })}>REMOVE ALL</button>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default NavTop;\r\n","import React, { useContext } from 'react';\r\nimport { ListContext } from '../../context/ListContext';\r\nimport './Dark.css';\r\n\r\nconst ToDoListDetails = ({ list }) => {\r\n    const { dispatch } = useContext(ListContext);\r\n    return (\r\n        <li onClick={() => dispatch({ type: 'REMOVE_LIST', id: list.id })}>\r\n            <div className=\"text\">{list.text} </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default ToDoListDetails;\r\n","import React, { useContext } from 'react'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport ToDoListDetails from './ToDoListDetails';\r\nimport './Dark.css';\r\n\r\nconst ToDoList = () => {\r\n    const { lists } = useContext(ListContext);\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <ul>\r\n                {lists.map(list => {\r\n                    return (<ToDoListDetails list={list} key={list.id} />);\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from 'react';\r\nimport './Switch.css';\r\nimport ListContextProvider from '../context/ListContext';\r\nimport NavbarLight from './lightTheme/NavbarLight';\r\nimport NavTopLight from './lightTheme/NavTopLight';\r\nimport ToDoListLight from './lightTheme/ToDoListLight';\r\nimport Navbar from './darkTheme/Navbar';\r\nimport NavTop from './darkTheme/NavTop';\r\nimport ToDoList from './darkTheme/ToDoList';\r\n\r\nconst Theme = ({ isOn, handleToggle, onColor }) => {\r\n    return !isOn ? (\r\n        <ListContextProvider>\r\n            <div className=\"top\">\r\n                <Navbar />\r\n                <NavTop />\r\n                <input\r\n                    checked={isOn}\r\n                    onChange={handleToggle}\r\n                    className=\"react-switch-checkbox\"\r\n                    id={`react-switch-new`}\r\n                    type=\"checkbox\"\r\n                />\r\n                <label\r\n                    style={{ background: isOn && onColor }}\r\n                    className=\"react-switch-label\"\r\n                    htmlFor={`react-switch-new`}\r\n                >\r\n                    <span className={`react-switch-button`} />\r\n                </label>\r\n            </div>\r\n            <ToDoList />\r\n        </ListContextProvider>\r\n    ) : (\r\n            <ListContextProvider>\r\n                <div className=\"top-light\">\r\n                    <NavbarLight />\r\n                    <NavTopLight />\r\n                    <input\r\n                        checked={isOn}\r\n                        onChange={handleToggle}\r\n                        className=\"react-switch-checkbox\"\r\n                        id={`react-switch-new`}\r\n                        type=\"checkbox\"\r\n                    />\r\n                    <label\r\n                        style={{ background: isOn && onColor }}\r\n                        className=\"react-switch-label\"\r\n                        htmlFor={`react-switch-new`}\r\n                    >\r\n                        <span className={`react-switch-button`} />\r\n                    </label>\r\n                </div>\r\n                <ToDoListLight />\r\n            </ListContextProvider>\r\n        );\r\n};\r\n\r\nexport default Theme;","import React, { useState } from 'react';\nimport Theme from './components/Theme';\nimport './components/darkTheme/Dark.css';\nimport './components/lightTheme/Light.css';\n\nfunction App() {\n  const [value, setValue] = useState(false);\n  return (\n    <div className=\"App\">\n      <Theme\n        isOn={value}\n        onColor=\"#fff\"\n        handleToggle={() => setValue(!value)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}